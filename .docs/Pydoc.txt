Help on module VIPILTest:

NAME
    VIPILTest

FILE
    /home/hon/may2008/vipilwmsc/VIPILTest.py

FUNCTIONS
    convPng2Tiff()
    
    pilExtract(file, bbox, size)
    
    pilPng2Tiff2km(monthlist)
    
    pilPng2Tiff500m(pathfileprefix, pnglist)
    
    pilPng2Tiff8km(monthlist)
    
    printPImgInfo(pim)
    
    printSysMemInfo()
    
    printVImgInfo(vim)
    
    testPIL(png, tif, bbox, size)
    
    testVips(png, tif, bbox, size)
    
    vipsExtract(file, bbox, size)
    
    vipsPng2Tiff2km(molist)
    
    vipsPng2Tiff500m(pathfileprefix, pnglist)
    
    vipsPng2Tiff8km(molist)


Help on module Raster:

NAME
    Raster

FILE
    /home/hon/may2008/vipilwmsc/Raster.py

DESCRIPTION
    The Raster module provides support for different resolution BMNG datasets: 8km, 2km, and 500m.
    Tiles can be generated by extracting an arbitrary bbox from BMNGfile(s) and resizing to the desired
    tile size.

FUNCTIONS
    buffered2kmBMNGPImg(layerOrfile)
        Returns PIL Image object if found in 2km res. global hash dicts. 
        Returns None if not present/initialized. The arg. can be either 2km
        BMNG layername/alias or actual filename.
    
    buffered2kmBMNGVImg(layerOrfile)
        Returns VIPS Image object if found in 2km res. global hash dicts. 
        Returns None if not present/initialized. The arg. can be either 2km
        BMNG layername/alias or actual filename.
    
    buffered500mBMNGVImg(layerOrfile)
        Returns VIPS Image object if found in 2km res. global hash dicts. 
        Returns None if not present/initialized. The arg. can be either 2km
        BMNG layername/alias or actual filename.
    
    buffered8kmBMNGPImg(layerOrfile)
        Returns PIL Image object if found in 8km res. global hash dicts. 
        Returns None if not present/initialized. The arg. can be either 8km
        BMNG layername/alias or actual filename.
    
    buffered8kmBMNGVImg(layerOrfile)
        Returns VIPS Image object if found in 8km res. global hash dicts. 
        Returns None if not present/initialized. The arg. can be either 8km
        BMNG layername/alias or actual filename.
    
    bufferedBMNGPImg(layerOrfile, bmngres)
    
    bufferedBMNGVImg(layerOrfile, bmngres)
    
    chooseRes(bbox, tilesize)
        ##################################3################# module funcs:
    
    cropVImg(vimg, pixbbox)
        Return new VImage from cropped extraction of larger VImage arg.
        and bbox arg (that is provided in pixel units)
    
    extractPIL(pimg, bmngres, bbox)
    
    extractVIPS(vimg, bmngres, bbox)
    
    extractVImgs(bbox)
        Evaluate and return cropped/extracted pixel images. First evaluate dict. of
        crop-boxes (in pixel coords) for each sub-images in the  list of VImages spanned by bbox:
        bboxdict == {'key==C,L,R,T,B,BL,BR,TL,TR':VImage, ...}
        where keys indicate:
        C bboxdict elem. == bbbox and is fully contained within a single BMNG quad. Q == A1,2 - D1,2
        L bboxdict elem. is left side of left-right pair spanning 2 BMNG quads Qs
        R bboxdict elem. is right side of left-right pair spanning 2 BMNG quads Qs
        T bboxdict elem. is top side of top-bottom pair spanning 2 BMNG quads Qs
        B bboxdict elem. is bottom side of top-bottom pair spanning 2 BMNG quads Qs
        BL bboxdict elem. is bottom-left quadrant of 4 BMNG quad files Qs
        BR bboxdict elem. is bottom-right quadrant of 4 BMNG quad files Qs
        TL bboxdict elem. is top-left quadrant of 4 BMNG quad files Qs
        TR bboxdict elem. is top-right quadrant of 4 BMNG quad files Qs
    
    genVImgTile(bbox, size)
        Evaluate and return desired image tile of specified size by cropping and extracting one
        or more sub-images from 1 to 4 BMNG 'quad.' files and merging and resizing them into a
        single images. All intermediate image results are deleted.
    
    initBMNG2kmPImgs()
        Need only be invoked once to populate the global _BMNG2km{Files,Imgs}
        hash dicts. Invocation of this is mutually exclusive with all other resolutionas.
        Subsequent to initialization of the 2km hash dicts. (for the duration of the process),
        all BMNG tile rendering will make use of the 8km, 2km, or 500m  resolution data. Currently only
        two keys are supported: SummerBMNG and WinterBMNG.
    
    initBMNG2kmVImgs()
        Need only be invoked once to populate the global _BMNG2km{Files,Imgs}
        hash dicts. Invocation of this is mutually exclusive with all other resolutionas.
        Subsequent to initialization of the 2km hash dicts. (for the duration of the process),
        all BMNG tile rendering will make use of the 8km, 2km or 500m resolution data. Currently only
        two keys are supported: SummerBMNG and WinterBMNG.
    
    initBMNG500mVImgs()
        Need only be invoked once to populate the global _BMNG2km{Files,Imgs}
        hash dicts. Invocation of this is mutually exclusive with all other resolutionas.
        Subsequent to initialization of the 500m hash dicts. (for the duration of the process),
        all BMNG tile rendering will make use of the 8km, 2km or 500m resolution data. Currently only
        two keys are supported: SummerBMNG and WinterBMNG.
    
    initBMNG8kmPImgs()
        Need only be invoked once to populate the global _BMNG8km{Files,Imgs}
        hash dicts. Invocation of this is mutually exclusive with all other resolutionas.
        Subsequent to initialization of the 8km hash dicts. (for the duration of the process),
        all BMNG tile rendering will make use of the 8km, 2km, or 500m  resolution data. Currently only
        two keys are supported: SummerBMNG and WinterBMNG.
    
    initBMNG8kmVImgs()
        Need only be invoked once to populate the global _BMNG8km{Files,Imgs}
        hash dicts. Invocation of this is mutually exclusive with all other resolutionas.
        Subsequent to initialization of the 8km hash dicts. (for the duration of the process),
        all BMNG tile rendering will make use of the 8km, 2km, or 500m resolution data. Currently only
        two keys are supported: SummerBMNG and WinterBMNG.
    
    insidebboxdeg(lonlat, bbox)
        Return True if point lon-lat arg. is inside bbox, otherwise return False
        lonlat = [lon. deg., lat. deg.], bbox = [bot-left lon., bot-left lat., top-right lon, top-right lat.]
    
    is2kmBMNGFile(filename)
        Returns True or False.
        Only checks the filename/substring: full path is not required, no 'stat' or I/O check
    
    is500mBMNGFile(filename)
        Returns True or False.
        Only checks the filename/substring: full path is not required, no 'stat' or I/O check
    
    is8kmBMNGFile(filename)
        Returns True or False.
        Only checks the filename/substring: full path is not required, no 'stat' or I/O check
    
    mergeVImgs(vimgs)
        Return single VImage obj. from merger of list, deleting contents of list.
    
    openVImgs(spanfiles)
        Return list of one or more VImage objs. opened from BMNG file(s).
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    resizeVImg(vim, size)
        Return resized VImage obj. (generally used after extracting/cropping area of interest).
    
    span1bbox(name, bbox)
        Returns dict. containing single (1) VImage cropped from single BMNG quad. file
        via bbox (that is converted to pixel coords)."
    
    span2bbox(vimfiles, bbox)
        Returns dict. containing two (2) VImage cropped from the 2 BMNG quad. files
        spanned by the bbox. Dict. keys must indicate orientation of cropped sub-images
        for subsequent merging into one final image (T,B or L,R)
    
    span4bbox(vimfiles, bbox)
        Returns dict. containing four (4) VImage cropped from the 4 BMNG quad. files
        spanned by the bbox. Dict. keys must indicate orientation of cropped sub-images
        for subsequent merging into one final image (TL,BL,TR,BR)
    
    spanFiles(bbox)
        Return list of one or more BMNG file(s) spanned by bbox.
    
    testC(bmngs, size)
        Return image tile extracted from 4 bmng 500m files (A1,A2,B1,B2 or ... C1,D1,C2,D2)
    
    testLR(bmngs, size)
    
    testSingle(bmng, size)
        Return image tile extracted from single bmng 500m file (A1 or A2 or B1 ... D2)
    
    testTB(bmngs, size)
    
    use2km(bbox, tilesize)
    
    use500m(bbox, tilesize)
    
    use8km(bbox, tilesize)

DATA
    rcsId = '$Name$ $Id: Raster.py 24 2008-04-01 06:19:16Z hon $'
    svnId = '$Name$ $Id: Raster.py 24 2008-04-01 06:19:16Z hon $'
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...


Help on module FileKeyUtils:

NAME
    FileKeyUtils

FILE
    /home/hon/may2008/vipilwmsc/FileKeyUtils.py

DESCRIPTION
    Module FileKeyUtils provides logging, image cache file name, I/O and
    management, along with memcache hash dict. key name construction
    funcs.

FUNCTIONS
    closeWMSlog()
        Supports log trace of WMS logic
    
    mapPILToStdOut(img)
        Writes PIL img arg. content out to stdout as PNG.
    
    mapPNGToStdOut(file)
        Reads specified file (must be fully specified path/imagefile.png);
        checks content to insure it is indeed a PNG, and if not, renames it,
        otherwise writes result to stdout. This important 'check/side-affect'
        insures the integrity of the image cache, and helps prevent all sorts
        of badly handled errors, especially with the 'WMSCascade' feature.
    
    openWMSlog(logfile='/devstore/apache2/logs/wms.log')
        Supports log trace of WMS logic
    
    parseAmpers(s)
    
    parseCommas(s)
    
    parseDelim(s, d)
        Returns list of words parsed from string s, using specified delimiter d.
    
    parseEqual(s)
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    rasterNameFullPath(layerlist, bmngres=None)
        For low to med. res. rasters, returns string containing a full image file
        name with directory path specification using the args. supplied and the
        DataStore global. Currently only supports BMNG raster PNGs or TIFFs.
        For high res. resters, returns hash dict. of all relevant full file names.
    
    replaceStr(sval, chold, chnew)
        Returns a deep copy string value that contains replaced sub-text.
    
    tileNameFile(projname, layerlist, size, bbox, origin)
        (deprecated) Returns string suitable for image tile file name prefix.
    
    tileNameFullPath(projname, layerlist, opacity, size, bbox, origin)
        Returns string containing a full file name prefix with directory path
        specification using the args. supplied and the DataStore and ImgCache globals.
        Also insures that the full set of subdirectories indicated in
        the path exist.
    
    tileNameInfoKey(projname, layerlist, size, bbox, origin)
        Support notion of two related/correltaed hash dict. key strings:
        and 'Info:key' and it corresponding 'Data:key'
    
    tileNameKey(projname, layerlist, size, bbox, origin)
        Returns a string suitable for use as a hash dict. key and/or
        an image (PNG) filename prefix from the args. provided:
        0. projection name (see names supported in GeoProj module)
        1. list/arrsy of layer names or aliases
        2. size == [width, height]
        3. bbox == [polar center lon., polar bounding lat.]
                or [min. lon., min lat., max lon., max lat.]
        4. origin == 'C', or other polar GeoProj.Anchor[]
                  or None
    
    tileNamePath(projname, layername, opacity, size)
        Returns string containing a full directory path specirfication
        using the args. supplied and the DataStore and ImgCache globals.
        Also insures that the full set of subdirectories indicated in
        the path exist.
    
    tilePNGPath(projname, layerlist, opacity, size, bbox, origin)
        Returns string containing a full image file name (fileprefix.png)
        with directory path specification using the args. supplied and the
        DataStore and ImgCache globals.
        Also insures that the full set of subdirectories indicated in
        the path exist.
    
    toRGBAlpha(alpha, imgfile)
        Adds an alpha plane (using arg. values) to the RGB PNG image file to create
        an RGBA file, overwriting the original file.
    
    toRGBAlphaFile(alpha, size, folder, prefix)
        Adds an alpha plane (using arg. values) to the RGB PNG image and creates
        a new RGBA file to create. Creates another resized image file for
        'quick-look' purposes. This behavior should be changed to perform
        only one or the other optionally, perhaps tiriggered by the size arg...

DATA
    BMNG2kmStore = '/devstore/GIS/BMNG/world_2km/'
    BMNG500mStore = '/devstore/GIS/BMNG/world_500m/'
    BMNG8kmStore = '/devstore/GIS/BMNG/world_8km/'
    DataStore = '/devstore/GIS/'
    ImgCache = '/devstore/GIS/pngcache/'
    USAStore = '/devstore/GIS/USA/'
    VMAP0Store = '/devstore/GIS/VMAP0/'
    WMSlog = None
    rcsId = '$Name:  $ $Id: .FileKeyUtils.py,v 1.1 2008/05/22 15:40:06 dho...
    svnId = '$Name:  $ $Id: .FileKeyUtils.py,v 1.1 2008/05/22 15:40:06 dho...
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...


Help on module GeoImage:

NAME
    GeoImage

FILE
    /home/hon/may2008/vipilwmsc/GeoImage.py

DESCRIPTION
    The GeoImage module provides functions for generating latlong
    and polar map projection PIL/PNG Image 'tiles' from ESRI
    and BMNG input data. The latlong (Cylindrical Equidistant) projections
    are handle by the Mapnik module, and the polar (Sterographic)
    projections are handled by Matplotlib.basemap.
    
    The polar tiles funcs. should return a PIL Image via matplotlib.basemap
    The flat map 'latlon' tile func. should return a PIL Image via mapnik
    The tile-name should be equiv. to the memcached key and/or the 
    diskcache file-name prefix (filename extension should default to png)
    Each func. should first attempt to find the tile in the memcached,
    then the diskcache, and finally render it directly (and cache it for
    future use).

FUNCTIONS
    handleLatLon(layerlist, alpha, size, bbox)
        Returns an Cylindrical Equidistant 'latlon' projection tile (PIL) Image of specified arg.
        size = [width, height] pixels, with area defined by bbox = [min. lon, min lat, max lon., max lat.].
        First check caches, and if needed, makes use of latlonRaster() or latlonMapnik() to
        create the first-time rendition of the Image tile. This is an entry point from a CGI app. or
        mod_python handler.
    
    handleNorthPolarCentered(layerlist, alpha, size, bbox)
        Returns an North polar projection tile (PIL) Image of specified arg. size = [width, height] pixels,
        with area defined by bbox = [center lon, bounding lat]. First check caches, and if needed,
        makes use of polarCenteredRaster() or  polarCenteredESRI() to create the first-time
        rendition of the Image tile. This is an entry point from a CGI app. or mod_python handler.
    
    handleSouthPolarCentered(layerlist, alpha, size, bbox)
        Returns an South polar projection tile (PIL) Image of specified arg. size = [width, height] pixels,
        with area defined by bbox = [center lon, bounding lat]. First check caches, and if
        needed, makes use of polarCenteredRaster() or  polarCenteredESRI() to create the first-time
        rendition of the Image tile. This is an entry point from a CGI app. or mod_python handler.
    
    latlonCached(layerlist, alpha, size, bbox)
        Returns latlon projection tile image found in cache(s). The args. are used to construct
        a hash dict. key which is first used to search the process in-memory image list, then
        the memcached images. If neither memory cache contans the desired image, then the key
        string is evaluated for a PNG path-file name that is sought in the disk cache. If no
        cached image is found, the 'None' object is returned.
    
    latlonMapnik(layerlist, alpha, size, bbox)
        Returns an Cylindrical Equidistant 'latlon' projection tile (PIL) Image of specified arg.
        size = [width, height] pixels, with area defined by bbox = [min. lon, min lat, max lon., max lat.].
        The args. are also used to construct a hash dict. key and a PNG full-path-file name that are
        used to store the tile image in the memory and disk caches for future use. As indicated
        in the function name, this relies on the Mapnik module classes and functions along with PIL.
        It supports any proper ESRI shapefile dataset(s) input, but does not currently support raster
        (PNG) input (i.e. no BMNG data).
    
    latlonRasterPIL(layerlist, alpha, size, bbox)
        Returns an Cylindrical Equidistant 'latlon' projection tile (PIL) Image of specified arg.
        size = [width, height] pixels, with area defined by bbox = [min. lon, min lat, max lon., max lat.].
        The args. are also used to construct a hash dict. key and a PNG full-path-file name that are
        used to store the tile image in the memory and disk caches for future use. This function relies
        exclusively on PIL (Python Image Library) classes and functions and currently only supports raster
        (PNG or TIFF) input (i.e. only BMNG data).
    
    latlonRasterVIPS(layerlist, alpha, size, bbox)
        Returns an Cylindrical Equidistant 'latlon' projection tile (PIL) Image of specified arg.
        size = [width, height] pixels, with area defined by bbox = [min. lon, min lat, max lon., max lat.].
        The args. are also used to construct a hash dict. key and a PNG full-path-file name that are
        used to store the tile image in the memory and disk caches for future use. This function relies
        on both VIPS and PIL (Python Image Library) classes and functions and currently only supports raster
        (PNG or TIFF) input (i.e. only BMNG data).
    
    polarCenteredCached(projname, layerlist, alpha, size, bbox)
        Returns polar projection tile image found in cache(s). The args. are used to construct
        a hash dict. key which is first used to search the process in-memory image list, then
        the memcached images. If neither memory cache contans the desired image, then the key
        string is evaluated for a PNG path-file name that is sought in the disk cache. If no
        cached image is found, the 'None' object is returned.
    
    polarCenteredESRI(projname, layerlist, alpha, size, centerLon, boundLat)
        Returns a polar projection tile (PIL) Image centered at the pole ('n' north or 's' south
        should be indicated in the first characer of the projection name arg). The args. are
        used to construct a hash dict. key and a PNG full-path-file name that are used to
        store the tile image in the memory and disk caches for future use. This supports any
        proper ESRI shapefile dataset(s) input. Matplotlib.basemap and pylab module objects and
        functions are used in conjunction with PIL.
    
    polarCenteredRasterPIL(projname, layerlist, alpha, size, centerLon, boundLat)
        Returns a polar projection tile (PIL) Image centered at the pole ('n' north or 's' south
        should be indicated in the first characer of the projection name arg). The args. are
        used to construct a hash dict. key and a PNG full-path-file name that are used to
        store the tile image in the memory and disk caches for future use. Currently this only
        supports the BMNG 8 or 2km datasets. Matplotlib.basemap and pylab module objects and
        functions are used in conjunction with PIL.
    
    polarCenteredRasterVIPS(projname, layerlist, alpha, size, centerLon, boundLat)
        Returns a polar projection tile (PIL) Image centered at the pole ('n' north or 's' south
        should be indicated in the first characer of the projection name arg). The args. are
        used to construct a hash dict. key and a PNG full-path-file name that are used to
        store the tile image in the memory and disk caches for future use. Currently this only
        supports the BMNG 8 or 2km datasets. Matplotlib.basemap and pylab module objects and
        functions are used in conjunction with PIL. 
        Note that this is untested and unlikely to work due to the fact that there is no built-in
        'vips_to_array' function in matplotlib.basemap!
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    usage()
        (depracted) Help printout for unit test main (GeoImage.py -h)

DATA
    rcsId = '$Name$ $Id: GeoImage.py 24 2008-04-01 06:19:16Z hon $'
    svnId = '$Name$ $Id: GeoImage.py 24 2008-04-01 06:19:16Z hon $'
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...


Help on module GeoProj:

NAME
    GeoProj

FILE
    /home/hon/may2008/vipilwmsc/GeoProj.py

DESCRIPTION
    Module GeoProj prvides global lists and hash dicts. containing
    projection and layer names and aliases supported by the OGCWMS. There
    are also some convenience functions for accessing the layer names and
    aliases.

FUNCTIONS
    layerFileBMNG(layer, bmngs, aliases)
        Returns filename for layer arg. in BMNG hash dict. or layer alias
    
    layerFileBMNG2km(layer)
        Returns 2km filename for layer arg.
    
    layerFileBMNG8km(layer)
        Returns 8km filename for layer arg.
    
    layerSizeBMNG(filename)
        Checks filename (substring) for BMNG resolution/pixel-size naming convention
        and returns size = [width, height]
    
    parseCmdln(cntrlatlon, bbox)
        Command line parsing of projection and bbox params.
    
    printDict(dict)
        Yet another way to printout hash dict. contents
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    setRcParms(wpix, hpix)
        Set relevant Matplotlib.basemap graphics rendering style.
    
    usage()
        (depracted) Help printout for unit test main (GeoProj.py -h)
    
    vmap0Layer(layer)
        Checks all VMAP0 layer names and aliases for layer arg. presence and
        returns list of all matches.

DATA
    Anchor = ['C', 'SW', 'S', 'SE', 'E', 'NE', 'N', 'NW', 'W']
    BMNG2kmLayers = {'BMNG02': 'world.topo.bathy.200402.3x21600x10800.tif'...
    BMNG2kmPNGs = ['world.topo.bathy.200401.3x21600x10800.png', 'world.top...
    BMNG2kmlist = ['world.topo.bathy.200401.3x21600x10800.tif', 'world.top...
    BMNG500mPNGs = ['world.topo.bathy.200401.3x21600x21600.A1.png', 'world...
    BMNG500mlist = ['world.topo.bathy.200401.3x21600x21600.A1.tif', 'world...
    BMNG8kmLayers = {'BMNG02': 'world.topo.bathy.200402.3x5400x2700.tif', ...
    BMNG8kmPNGs = ['world.topo.bathy.200401.3x5400x2700.png', 'world.topo....
    BMNG8kmlist = ['world.topo.bathy.200401.3x5400x2700.tif', 'world.topo....
    BMNGAliasLayers = {'BMNG': 'Summer', 'BMNG0': 'Winter', 'BMNG00': 'Win...
    LatLonEPSGlist = ['EPSG:3410', 'EPSG:4326']
    NorthPolarEPSGlist = ['EPSG:32661', 'EPSG:3411', 'EPSG:3413', 'EPSG:35...
    NorthPolarProjlist = ['npstere', 'npaeqd', 'nplaea']
    PolarEPSGlist = ['EPSG:32661', 'EPSG:3411', 'EPSG:3413', 'EPSG:3571', ...
    PolarProjdict = {'PolarAzimuthalEquidistant': 'paeqd', 'PolarLambertAz...
    PolarProjlist = ['pstere', 'paeqd', 'plaea', 'npstere', 'npaeqd', 'npl...
    Proj4dict = {'Airy': 'airy', 'Aitoff': 'aitoff', 'AlbersEqualArea': 'a...
    Resbasemap = ['c', 'l', 'i', 'h']
    ReversePolarProjdict = {'paeqd': 'PolarAzimuthalEquidistant', 'plaea':...
    SouthPolarEPSGlist = ['EPSG:32761', 'EPSG:3031', 'EPSG:3412']
    SouthPolarProjlist = ['spstere', 'spaeqd', 'splaea']
    VMAP0AliasLayers = {'VMAP0H2O': 'INWATERA,WATRCRSL,OCEANSEA,HYDROTXT,B...
    VMAP0EURLayers = {'AEROFACP': 'v0eur_shp/AEROFACP', 'AQUECANL': 'v0eur...
    VMAP0NOALayers = {'AEROFACP': 'v0noa_shp/AEROFACP', 'AQUECANL': 'v0noa...
    VMAP0SASLayers = {'AEROFACP': 'v0sas_shp/AEROFACP', 'AQUECANL': 'v0sas...
    VMAP0SOALayers = {'AEROFACP': 'v0soa_shp/AEROFACP', 'AQUECANL': 'v0soa...
    VMAPORegionLayers = {'eurAEROFACP': 'v0eur_shp/AEROFACP', 'eurAQUECANL...
    k = 'PHYSTXT'
    rcsId = '$Name$ $Id: GeoProj.py 24 2008-04-01 06:19:16Z hon $'
    svnId = '$Name$ $Id: GeoProj.py 24 2008-04-01 06:19:16Z hon $'
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...
    v = 'v0sas_shp/PHYSTXT'


Help on module OGCREST:

NAME
    OGCREST

FILE
    /home/hon/may2008/vipilwmsc/OGCREST.py

DESCRIPTION
    OGCREST provides the principle entry point/function into the OGCWMSC
    system, via CGI or Mod_Python. A CGI app. uses parseCGI to evaluate
    the WMS REST request args., then invokes the renderPNG() func. A 
    mod_python handler invokes the WMSModPyHandler func., which 
    parses the WMS REST req. args, then invokes the renderPNG() func.

FUNCTIONS
    WMS2km8kmModPyHandler(req)
        Special purpose mod_python handler for BMNG 2k and 8km resolution map tile projection images/
    
    WMS500mModPyHandler(req)
        Special purpose mod_python handler for BMNG 500m resolution map tile projection images/
    
    WMS8kmModPyHandler(req)
        Special purpose mod_python handler for BMNG 8k resolution map tile projection images/
    
    WMSModPyHandler(req)
        General purpose mod_python handler entry point into OGCWMS system. Opens log file
        and makes use of module functions to parse the request., then invokes the renderPNG
        func.
    
    decodeURL(arg)
        Returns a decoded URL string value.
    
    htdocRoot(req)
        Returns apache httpd document root of mod_python handler.
    
    parseModPyArgs(args)
        Returns hash dict. of parsed WMS REST ampersan (&) separated and key = comma (,) delimited values.
        URL decoding is also performed.
    
    parseWMS(req, OGCreq)
        Applies parseModPyArgs() to all key args provided in REST req. to set full OGCReq hash dict.
    
    parseWMSCGI(cgireq, OGCreq)
        Applies standard python CGI module functions to parse all key args provided in REST req. 
        and set the full OGCReq hash dict.
    
    preCacheLatLon(port, bbox)
    
    preCachePolarProj(port, latlist)
        Performs a series of urllib.urlretrieve invocations using WMS requests constructed for
        stereographic polar projections over the indicated list of lat. longs.
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    printReq(req)
        Prints the contents ofr the mod_python handler request object.
    
    printSysInfo(req, OGCreq)
        Printout environment of mod_python process.
    
    printSysInfoCGI(OGCreq)
        Printout environment of CGI app.
    
    renderPNG(req, OGCreq)
        This is the main entry point in to all the map projection functionality from a
        mod_python handler. Given the REST req. and fully initialized OGCReq has dict.
        args., proceeds to invoked either polar or latlon image map tile functions and
        writes the resultant PIL image as a PNG to the browser via the web server.
    
    urlCascadeCGI(url)
        Helper to CGI apps. that cascade/forward WMS requests to external services.
    
    urlCascadeReq(req, url)
        Helper to mod_python handlers that cascade/forward WMS requests to external services.

DATA
    rcsId = '$Name$ $Id: OGCREST.py 24 2008-04-01 06:19:16Z hon $'
    svnId = '$Name$ $Id: OGCREST.py 24 2008-04-01 06:19:16Z hon $'
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...


Help on module PILMemCache:

NAME
    PILMemCache

FILE
    /home/hon/may2008/vipilwmsc/PILMemCache.py

DESCRIPTION
    The PILMemCache module provides functions for 'pickling' PIL Image
    objects and for their insertion and extraction to/from one
    or more 'memcached' daemons.

FUNCTIONS
    dataKeyFromInfoKey(infokey)
        Insures that the data key and the info. key for a specific PIL Image
        hash dict. element are self consistent. Once an info key is generated,
        this function should be used to generate the associated data key.
    
    manageImgdict(key, img)
        The mod_python application can use internal (apache process RAM) memory
        to store a hash dict. of PIL Images for immediate delivery to a browser
        WMS client. This function provides the means to insert newly created images,
        and once the internal memory limit is reached, removes older images.
    
    manageImgdictRefCnt(key, img, cnt)
        Alternative image management func. that attempts a simpleminded way to insure
        hashdicts don't exhaust httpd process memory. Not currently used.
    
    memcacheAddContent(mcserver, content)
        Inserts/replaces info. key old content with new.
    
    memcacheGetContent(mcserver)
        Fetches the full content (list of all info. keys) of the specified memcached
        server and returns list.
    
    memcacheGetPIL(imgkeys, mcserver)
        Method for extracting a compressed PIL image from a memcached via 'zlib'.
    
    memcacheGetPNG(pngkey, mcserver)
        Method for extracting a PNG image from a memcached via 'Cpickle'.
    
    memcachePutPIL(pim, imgkeys, mcserver)
        Method for inserting a PIL Image into a memcached via 'zlib compression'.
        Currently compression level == 3 is used, this is fast and sufficiently
        compressed to handle 512x512 RGBA images, but larger one may be problematic.
        There is a limit to the size of an object the memcached protocal supports.
    
    memcachePutPNG(png, pngkey, mcserver)
        Method for inserting a PNG image into a memcached via 'Cpickle'.
    
    memcacheStats(mcserver)
        Fetches the current connection (and other) status of the specified memcached
        server and (optionally prints it to the log) and returns hash dict.
    
    pickleGetPIL(imginfo, pfile)
        Returns PIL Image opbject via cPickle file I/O read, given the image attribute
        info: imginfo['mode'], imginfo['size'], and the filename full path args.
    
    picklePutPIL(pim, pfile)
        Returns PIL Image info: imginfo['mode'], imginfo['size'] via cPickle file I/O read,
        given the Image object pim and the filename full path pfile args.
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    testContents()
        Performs a memcache get of the 'full content' special purpose
        hash dict. object that should contain all the info. keys of all
        the PIL Image objects currently resident in the memory cache.
        Prints out the results, but does not return anything.
    
    testPILGet(mcserver)
        Performs a single get of a PIL Image to test the memcached interface.
    
    testPILPut(mcserver)
        Performs a set of puts (and gets) of PIL Images to test the memcached interface(s).
    
    testPNG(mcserver, filenmame)
        Performs a single iput and get of a PNG file to test the memcached interface.
    
    viewPNGs(pnglist)
        Relies on an externally installed 'xv' binary application that must be
        found in the user environment to display the list of PNG files specified
        in the arg.

DATA
    rcsId = '$Name$ $Id: PILMemCache.py 24 2008-04-01 06:19:16Z hon $'
    svnId = '$Name$ $Id: PILMemCache.py 24 2008-04-01 06:19:16Z hon $'
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...


Help on module ProcUtils:

NAME
    ProcUtils

FILE
    /home/hon/may2008/vipilwmsc/ProcUtils.py

DESCRIPTION
    The ProcUtils module provides functions that support external daemon management,
    specifically the memcached and the httpd. The unit test main can be used to
    to (re)start and/or monitor memory utilization of the external daemons; and
    a signal handler is provided to allow the memory monitor to run as an interruptable
    daemon.

FUNCTIONS
    pidHTTPd(htconf)
        Returns the parent pid of the process group associated with the Apache httpd web server
        running with the indicated config: httpd.conf90 or httpd.conf98 or httpd.conf99, etc.
    
    printInfoDoc()
        Printout global _modinfo text, followed by module help().
    
    restartHTTPd(htconf)
        Uses os.system() to pkill and then invokes the Apache httpd with the specified
        config: httpd.conf90 or httpd.conf98 or httpd.conf99, etc.
    
    restartMemCached()
        Uses os.system() to pkill and then starts 3 specific memcached procs. via the following:
        latlon projection tiles:    memcached -d -k -m 2048 -l 127.0.0.1 -p 11110
        north polar stereographic:  memcached -d -k -m 2048 -l 127.0.0.1 -p 11111
        south polar stereographic:  memcached -d -k -m 2048 -l 127.0.0.1 -p 11112
    
    sighandler(signum, frame)
        Interrupt handler allows suspension via SIGHUP and resumption via SIGCONT;
        and termination via SIGABRT, SIGINT, and/or preferably SIGTERM.
    
    signals()
        Establishes signal handler and returns hash dict. of signal names of interest.

DATA
    rcsId = '$Name$ $Id: ProcUtils.py 24 2008-04-01 06:19:16Z hon $'
    svnId = '$Name$ $Id: ProcUtils.py 24 2008-04-01 06:19:16Z hon $'
    svnUrl = '$HeadURL: svn+ssh://hon@honsys.com/var/svnroot/ogcwms/trunk/...


